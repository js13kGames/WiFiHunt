function toFixed(t,i){return Math.round(t*10**i)/10**i}function toRadians(t){return toFixed(t*(Math.PI/180),4)}function polarToCartesian(t,i){const e=toRadians(t);return[Math.cos(e),Math.sin(e)].map(t=>toFixed(i*t,4))}kontra={init(t){let i=this.canvas=document.getElementById(t)||t||document.querySelector("canvas");if(!i)throw Error("You must provide a canvas element for the game");this.context=i.getContext("2d")},_noop:new Function,_tick:new Function},kontra.gameLoop=function(t){if(!(t=t||{}).update||!t.render)throw Error("You must provide update() and render() functions");const i=t.fps||60;let e=0;const n=1e3/i,s=1/i,o=!1===t.clearCanvas?kontra._noop:function(){kontra.context.clearRect(0,0,kontra.canvas.width,kontra.canvas.height)};let r,a,c,h;function d(){if(a=requestAnimationFrame(d),c=performance.now(),h=c-r,r=c,!(h>1e3)){for(kontra._tick(),e+=h;e>=n;)u.update(s),e-=n;o(),u.render()}}let u={update:t.update,render:t.render,isStopped:!0,start(){r=performance.now(),this.isStopped=!1,requestAnimationFrame(d)},stop(){this.isStopped=!0,cancelAnimationFrame(a)},_frame:d,set _last(t){r=t}};return u},function(){const t={};let e={};const n={13:"enter",27:"esc",32:"space",37:"left",38:"up",39:"right",40:"down"};for(let t=0;t<26;t++)n[65+t]=(10+t).toString(36);for(i=0;i<10;i++)n[48+i]=`${i}`;addEventListener("keydown",function(i){const s=n[i.which];e[s]=!0,t[s]&&t[s](i)}),addEventListener("keyup",function(t){e[n[t.which]]=!1}),addEventListener("blur",function(t){e={}}),kontra.keys={bind(i,e){[].concat(i).map(i=>{t[i]=e})},unbind(i,e){[].concat(i).map(i=>{t[i]=e})},pressed:t=>!!e[t]}}(),function(){class t{constructor(t,i){this._x=t||0,this._y=i||0}add(t,i){this.x+=(t.x||0)*(i||1),this.y+=(t.y||0)*(i||1)}clamp(t,i,e,n){this._c=!0,this._a=t,this._b=i,this._d=e,this._e=n}get x(){return this._x}get y(){return this._y}set x(t){this._x=this._c?Math.min(Math.max(this._a,t),this._d):t}set y(t){this._y=this._c?Math.min(Math.max(this._b,t),this._e):t}}kontra.vector=((i,e)=>new t(i,e)),kontra.vector.prototype=t.prototype;class i{init(t,i,e,n){for(i in t=t||{},this.position=kontra.vector(t.x,t.y),this.velocity=kontra.vector(t.dx,t.dy),this.acceleration=kontra.vector(t.ddx,t.ddy),this.width=this.height=0,this.context=kontra.context,t)this[i]=t[i];if(e=t.image)this.image=e,this.width=e.width,this.height=e.height;else if(e=t.animations){for(i in e)this.animations[i]=e[i].clone(),n=n||e[i];this._ca=n,this.width=n.width,this.height=n.height}return this}get x(){return this.position.x}get y(){return this.position.y}get dx(){return this.velocity.x}get dy(){return this.velocity.y}get ddx(){return this.acceleration.x}get ddy(){return this.acceleration.y}set x(t){this.position.x=t}set y(t){this.position.y=t}set dx(t){this.velocity.x=t}set dy(t){this.velocity.y=t}set ddx(t){this.acceleration.x=t}set ddy(t){this.acceleration.y=t}isAlive(){return this.ttl>0}collidesWith(t){return this.x<t.x+t.width&&this.x+this.width>t.x&&this.y<t.y+t.height&&this.y+this.height>t.y}update(t){this.advance(t)}render(){this.draw()}playAnimation(t){this._ca=this.animations[t],this._ca.loop||this._ca.reset()}advance(t){this.velocity.add(this.acceleration,t),this.position.add(this.velocity,t),this.ttl--,this._ca&&this._ca.update(t)}draw(){this.image?this.context.drawImage(this.image,this.x,this.y):this._ca?this._ca.render(this):(this.context.fillStyle=this.color,this.context.fillRect(this.x,this.y,this.width,this.height))}}kontra.sprite=(t=>(new i).init(t)),kontra.sprite.prototype=i.prototype}(),kontra.store={set(t,i){void 0===i?localStorage.removeItem(t):localStorage.setItem(t,JSON.stringify(i))},get(t){let i=localStorage.getItem(t);try{i=JSON.parse(i)}catch(t){}return i}};class Point{constructor(t,i){this.x=t,this.y=i}distanceTo(t){return Math.sqrt((this.x-t.x)**2+(this.y-t.y)**2)}}class AccessPoint{constructor(t){this.ssid=t.ssid,this.centre=t.centre,this.radius=t.radius,this.speed=t.speed,this.jitter=t.jitter,this.encryption=t.encryption,this.password=t.password}isInRange(t){return t.distanceTo(this.centre)<=this.radius}}const debugOn=!0;function debug(t){debugOn&&console.log(t)}const goal={download:{total:2048,completed:0},upload:{total:1024,completed:0}},achievements=[{name:"1337 hax0r",description:"Bruteforce a WiFi network"},{name:"Step out into the sun",description:"Leave the confines of your room"},{name:"Clever guesser",description:"Correctly guess a WiFi network's  password"},{name:"Overcoming social anxiety",description:"Ask for a WiFi password"},{name:"Freeloader",description:"Connect to a freemium WiFi"},{name:"My own damn internet",description:"Use mobile network"},{name:"Puzzle solver",description:"Solve a puzzle and attain a WiFi password"},{name:"$$$",description:"Pay for WiFi"},{name:"Broke",description:"Run out of cash"}],accessPoints=[{ssid:"Verizon WiFi"},{ssid:"McDonald's Wifi"},{ssid:"Joe's iPhone"},{ssid:"NETGEAR68"},{ssid:"Who wants free WiFi"},{ssid:"Free WiFi Initiative"},{ssid:"Prada WiFi"},{ssid:"AndroidAP"},{ssid:"Linksys"},{ssid:"PuzzleConf"},{ssid:"[binary stuff]"},{ssid:"Hyatt"},{ssid:"xfinitywifi"},{ssid:"Muller home"}].map(t=>new AccessPoint(t));let currentAP,currentRoom,batteryExhaustionRate,currentPosition=new Point(0,0),battery=100;const rooms=new Map(null);let angleOfRotation=90,networkListOpen=!1,isPaused=!1;const networkListDimensions={width:200,height:600};function getAccessPoints(t){return accessPoints.filter(i=>i.isInRange(t))}window.onload=(()=>{kontra.init();const t=75,i=125;let e=kontra.sprite({color:"red",x:(kontra.canvas.width-t)/2,y:kontra.canvas.height-i-20,width:t,height:i});const n=kontra.gameLoop({update:()=>{e.update()},render:()=>{e.render()}});kontra.keys.bind(["up","w"],()=>{debug(toRadians(angleOfRotation));const[t,i]=polarToCartesian(angleOfRotation,1);currentPosition.x+=t,currentPosition.y+=i,debug(`(${currentPosition.x}, ${currentPosition.y})`)}),kontra.keys.bind(["left","a"],()=>{(angleOfRotation+=1)>=360&&(angleOfRotation=0),debug(angleOfRotation)}),kontra.keys.bind(["right","d"],()=>{(angleOfRotation-=1)<0&&(angleOfRotation=359),debug(angleOfRotation)}),kontra.keys.bind("p",()=>{debug("pause")}),kontra.keys.bind("n",()=>{debug("list networks"),debug(getAccessPoints(currentPosition))}),n.start()});